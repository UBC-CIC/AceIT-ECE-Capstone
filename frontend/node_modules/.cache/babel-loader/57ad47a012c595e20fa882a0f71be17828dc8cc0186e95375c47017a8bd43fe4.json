{"ast":null,"code":"// import React, { useState } from 'react';\n// function App() {\n//   const [num1, setNum1] = useState('');\n//   const [num2, setNum2] = useState('');\n//   const callAPI = (num1, num2) => {\n//     var myheaders = new Headers();\n//     myheaders.append(\"Content-Type\", \"application/json\");\n//     var raw = JSON.stringify({ \"num1\": num1, \"num2\": num2 });\n//     var requestOptions = {\n//       method: \"POST\",\n//       headers: myheaders,\n//       body: raw,\n//       redirect: \"follow\"\n//     };\n//     fetch(\"https://1nxs3vcjg3.execute-api.us-west-2.amazonaws.com/testadd\", requestOptions)\n//       .then(response => response.text())\n//       .then(result => alert(JSON.parse(result).body))\n//       .catch(error => console.log('Error:', error));\n//   };\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     callAPI(num1, num2);\n//   };\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h1>Submit Numbers</h1>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Number 1:\n//           <input\n//             type=\"number\"\n//             value={num1}\n//             onChange={(e) => setNum1(e.target.value)}\n//             required\n//           />\n//         </label>\n//         <br /><br />\n//         <label>\n//           Number 2:\n//           <input\n//             type=\"number\"\n//             value={num2}\n//             onChange={(e) => setNum2(e.target.value)}\n//             required\n//           />\n//         </label>\n//         <br /><br />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n// export default App;\n// ======\nimport React,{useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[output,setOutput]=useState('');const[loading,setLoading]=useState(false);const[error,setError]=useState('');const callLambdaFunction=async()=>{setLoading(true);setError('');try{// Replace this URL with your actual Lambda function URL\nconst lambdaUrl=\"https://zmv8ad1dmk.execute-api.us-west-2.amazonaws.com/newstage\";const response=await fetch(lambdaUrl,{method:'POST',// Change this method if your Lambda expects a POST request\nheaders:{'Content-Type':'application/json'}});if(response.ok){const result=await response.text();setOutput(result);}else{setError('Failed to fetch data from Lambda');}}catch(err){setError('Error calling Lambda function');console.error(err);}finally{setLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Lambda Text Extraction\"}),/*#__PURE__*/_jsx(\"button\",{onClick:callLambdaFunction,disabled:loading,children:loading?'Loading...':'Call Lambda'}),error&&/*#__PURE__*/_jsx(\"p\",{style:{color:'red'},children:error}),/*#__PURE__*/_jsx(\"h3\",{children:\"Output:\"}),/*#__PURE__*/_jsx(\"pre\",{children:output})]});}export default App;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","App","output","setOutput","loading","setLoading","error","setError","callLambdaFunction","lambdaUrl","response","fetch","method","headers","ok","result","text","err","console","style","padding","children","onClick","disabled","color"],"sources":["/Users/llcce44/Documents/GitHub/testprivcapstone/amplify-demo-app/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n\n// function App() {\n//   const [num1, setNum1] = useState('');\n//   const [num2, setNum2] = useState('');\n\n//   const callAPI = (num1, num2) => {\n//     var myheaders = new Headers();\n//     myheaders.append(\"Content-Type\", \"application/json\");\n//     var raw = JSON.stringify({ \"num1\": num1, \"num2\": num2 });\n//     var requestOptions = {\n//       method: \"POST\",\n//       headers: myheaders,\n//       body: raw,\n//       redirect: \"follow\"\n//     };\n//     fetch(\"https://1nxs3vcjg3.execute-api.us-west-2.amazonaws.com/testadd\", requestOptions)\n//       .then(response => response.text())\n//       .then(result => alert(JSON.parse(result).body))\n//       .catch(error => console.log('Error:', error));\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     callAPI(num1, num2);\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h1>Submit Numbers</h1>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Number 1:\n//           <input\n//             type=\"number\"\n//             value={num1}\n//             onChange={(e) => setNum1(e.target.value)}\n//             required\n//           />\n//         </label>\n//         <br /><br />\n//         <label>\n//           Number 2:\n//           <input\n//             type=\"number\"\n//             value={num2}\n//             onChange={(e) => setNum2(e.target.value)}\n//             required\n//           />\n//         </label>\n//         <br /><br />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n// ======\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [output, setOutput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const callLambdaFunction = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      // Replace this URL with your actual Lambda function URL\n      const lambdaUrl = \"https://zmv8ad1dmk.execute-api.us-west-2.amazonaws.com/newstage\";\n\n      const response = await fetch(lambdaUrl, {\n        method: 'POST', // Change this method if your Lambda expects a POST request\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        const result = await response.text();\n        setOutput(result);\n      } else {\n        setError('Failed to fetch data from Lambda');\n      }\n    } catch (err) {\n      setError('Error calling Lambda function');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Lambda Text Extraction</h1>\n      <button onClick={callLambdaFunction} disabled={loading}>\n        {loading ? 'Loading...' : 'Call Lambda'}\n      </button>\n\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n\n      <h3>Output:</h3>\n      <pre>{output}</pre>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACQ,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAEtC,KAAM,CAAAY,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrCH,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,EAAE,CAAC,CACZ,GAAI,CACF;AACA,KAAM,CAAAE,SAAS,CAAG,iEAAiE,CAEnF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,SAAS,CAAE,CACtCG,MAAM,CAAE,MAAM,CAAE;AAChBC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,GAAIH,QAAQ,CAACI,EAAE,CAAE,CACf,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CACpCb,SAAS,CAACY,MAAM,CAAC,CACnB,CAAC,IAAM,CACLR,QAAQ,CAAC,kCAAkC,CAAC,CAC9C,CACF,CAAE,MAAOU,GAAG,CAAE,CACZV,QAAQ,CAAC,+BAA+B,CAAC,CACzCW,OAAO,CAACZ,KAAK,CAACW,GAAG,CAAC,CACpB,CAAC,OAAS,CACRZ,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,mBACEL,KAAA,QAAKmB,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAO,CAAE,CAAAC,QAAA,eAC9BvB,IAAA,OAAAuB,QAAA,CAAI,wBAAsB,CAAI,CAAC,cAC/BvB,IAAA,WAAQwB,OAAO,CAAEd,kBAAmB,CAACe,QAAQ,CAAEnB,OAAQ,CAAAiB,QAAA,CACpDjB,OAAO,CAAG,YAAY,CAAG,aAAa,CACjC,CAAC,CAERE,KAAK,eAAIR,IAAA,MAAGqB,KAAK,CAAE,CAAEK,KAAK,CAAE,KAAM,CAAE,CAAAH,QAAA,CAAEf,KAAK,CAAI,CAAC,cAEjDR,IAAA,OAAAuB,QAAA,CAAI,SAAO,CAAI,CAAC,cAChBvB,IAAA,QAAAuB,QAAA,CAAMnB,MAAM,CAAM,CAAC,EAChB,CAAC,CAEV,CAEA,cAAe,CAAAD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}