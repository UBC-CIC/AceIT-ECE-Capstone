{"ast":null,"code":"var _jsxFileName = \"/Users/llcce44/Documents/GitHub/testprivcapstone/amplify-demo-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState } from 'react';\n\n// function App() {\n//   const [num1, setNum1] = useState('');\n//   const [num2, setNum2] = useState('');\n\n//   const callAPI = (num1, num2) => {\n//     var myheaders = new Headers();\n//     myheaders.append(\"Content-Type\", \"application/json\");\n//     var raw = JSON.stringify({ \"num1\": num1, \"num2\": num2 });\n//     var requestOptions = {\n//       method: \"POST\",\n//       headers: myheaders,\n//       body: raw,\n//       redirect: \"follow\"\n//     };\n//     fetch(\"https://1nxs3vcjg3.execute-api.us-west-2.amazonaws.com/testadd\", requestOptions)\n//       .then(response => response.text())\n//       .then(result => alert(JSON.parse(result).body))\n//       .catch(error => console.log('Error:', error));\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     callAPI(num1, num2);\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h1>Submit Numbers</h1>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Number 1:\n//           <input\n//             type=\"number\"\n//             value={num1}\n//             onChange={(e) => setNum1(e.target.value)}\n//             required\n//           />\n//         </label>\n//         <br /><br />\n//         <label>\n//           Number 2:\n//           <input\n//             type=\"number\"\n//             value={num2}\n//             onChange={(e) => setNum2(e.target.value)}\n//             required\n//           />\n//         </label>\n//         <br /><br />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState } from 'react';\n\nfunction App() {\n  _s();\n  const [output, setOutput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const callLambdaFunction = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      // Replace this URL with your actual Lambda function URL\n      const lambdaUrl = \"https://jb2sczrycg37nrcvqyb3dghiyu0lhiqv.lambda-url.us-west-2.on.aws/\";\n      const response = await fetch(lambdaUrl, {\n        method: 'POST',\n        // Change this method if your Lambda expects a POST request\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const result = await response.text();\n        setOutput(result);\n      } else {\n        setError('Failed to fetch data from Lambda');\n      }\n    } catch (err) {\n      setError('Error calling Lambda function');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lambda Text Extraction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: callLambdaFunction,\n      disabled: loading,\n      children: loading ? 'Loading...' : 'Call Lambda'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Output:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OKgdDmINh343yYgS0gqs55b+h7w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_s","output","setOutput","useState","loading","setLoading","error","setError","callLambdaFunction","lambdaUrl","response","fetch","method","headers","ok","result","text","err","console","_jsxDEV","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","color","_c","$RefreshReg$"],"sources":["/Users/llcce44/Documents/GitHub/testprivcapstone/amplify-demo-app/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n\n// function App() {\n//   const [num1, setNum1] = useState('');\n//   const [num2, setNum2] = useState('');\n\n//   const callAPI = (num1, num2) => {\n//     var myheaders = new Headers();\n//     myheaders.append(\"Content-Type\", \"application/json\");\n//     var raw = JSON.stringify({ \"num1\": num1, \"num2\": num2 });\n//     var requestOptions = {\n//       method: \"POST\",\n//       headers: myheaders,\n//       body: raw,\n//       redirect: \"follow\"\n//     };\n//     fetch(\"https://1nxs3vcjg3.execute-api.us-west-2.amazonaws.com/testadd\", requestOptions)\n//       .then(response => response.text())\n//       .then(result => alert(JSON.parse(result).body))\n//       .catch(error => console.log('Error:', error));\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     callAPI(num1, num2);\n//   };\n\n//   return (\n//     <div style={{ padding: '20px' }}>\n//       <h1>Submit Numbers</h1>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Number 1:\n//           <input\n//             type=\"number\"\n//             value={num1}\n//             onChange={(e) => setNum1(e.target.value)}\n//             required\n//           />\n//         </label>\n//         <br /><br />\n//         <label>\n//           Number 2:\n//           <input\n//             type=\"number\"\n//             value={num2}\n//             onChange={(e) => setNum2(e.target.value)}\n//             required\n//           />\n//         </label>\n//         <br /><br />\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState } from 'react';\n\nfunction App() {\n  const [output, setOutput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const callLambdaFunction = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      // Replace this URL with your actual Lambda function URL\n      const lambdaUrl = \"https://jb2sczrycg37nrcvqyb3dghiyu0lhiqv.lambda-url.us-west-2.on.aws/\";\n\n      const response = await fetch(lambdaUrl, {\n        method: 'POST', // Change this method if your Lambda expects a POST request\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        const result = await response.text();\n        setOutput(result);\n      } else {\n        setError('Failed to fetch data from Lambda');\n      }\n    } catch (err) {\n      setError('Error calling Lambda function');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Lambda Text Extraction</h1>\n      <button onClick={callLambdaFunction} disabled={loading}>\n        {loading ? 'Loading...' : 'Call Lambda'}\n      </button>\n\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n\n      <h3>Output:</h3>\n      <pre>{output}</pre>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,SAASA,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMK,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrCH,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,EAAE,CAAC;IACZ,IAAI;MACF;MACA,MAAME,SAAS,GAAG,uEAAuE;MAEzF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,SAAS,EAAE;QACtCG,MAAM,EAAE,MAAM;QAAE;QAChBC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACpCd,SAAS,CAACa,MAAM,CAAC;MACnB,CAAC,MAAM;QACLR,QAAQ,CAAC,kCAAkC,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOU,GAAG,EAAE;MACZV,QAAQ,CAAC,+BAA+B,CAAC;MACzCW,OAAO,CAACZ,KAAK,CAACW,GAAG,CAAC;IACpB,CAAC,SAAS;MACRZ,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEc,OAAA;IAAKC,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9BH,OAAA;MAAAG,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BP,OAAA;MAAQQ,OAAO,EAAEnB,kBAAmB;MAACoB,QAAQ,EAAExB,OAAQ;MAAAkB,QAAA,EACpDlB,OAAO,GAAG,YAAY,GAAG;IAAa;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,EAERpB,KAAK,iBAAIa,OAAA;MAAGC,KAAK,EAAE;QAAES,KAAK,EAAE;MAAM,CAAE;MAAAP,QAAA,EAAEhB;IAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEjDP,OAAA;MAAAG,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBP,OAAA;MAAAG,QAAA,EAAMrB;IAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEV;AAAC1B,EAAA,CA9CQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}